1. 패키지 설치
  - # yum install libguestfs-tools virt-install
  
2. qcow2 이미지를 가져올수 있도록 repo 설정
  - # vi /etc/virt-builder/repos.d/local.conf
      [rhel6]
      uri=http://[IP]/kvm_imgs/rhel6/index
      proxy=off
      [rhel7]
      uri=http://[IP]/kvm_imgs/rhel7/index
      proxy=off
      [rhel8]
      uri=http://[IP]/kvm_imgs/rhel8/index
      proxy=off
      
3. guest os image 생성
  - # virt-builder [OS_NAME] -o [qcow2_img_PATH] --root-password password:[password] --size [size_GB]
  - # virt-builder rhel8.1 (단순하게 생성)
  - # virt-builder rhel8.1 -o /var/lib/libvirt/images/rhel8.1_test.qcow2 --root-password password:[password] --size 10G
  
4. 생성된 os image를 이용하여 VM 생성
  - # virt-install --import --name [VM_NAME] --memory [memory_MB] --vcpus [cpu] --os-variant [os_version] --network [network_conf] --import --disk [disk_path]
  - # virt-install --import --name rhel8.1_vm --memory 2048 --vcpus 2 --os-variant rhel8.1 --network bridge=br1,model=virtio --import --disk /var/lib/libvirt/images/rhel8.1_test.qcow2
  
  
참조
  - [os_version] 을 명시할때는 # osinfo-query os 에 출력 되는 이름으로 

  - 이미지를 더 빠르게 빌드하기 위해서는 repo에 있는 이미지를 cache 해 놓을 수 있음
  - # virt-builder --cache-all-templates
  
  - # virt-builder --print-cache (확인)
  cache directory: /root/.cache/virt-builder
  rhel6.5 x86_64 no
  rhel6.6 x86_64 no
  rhel6.7 x86_64 cached
  rhel6.8 x86_64 cached
  
  
  - 아래 에러 발생 조치 (rhel 8.2)
    virt-builder: error: external command ‘'curl' -q --config
    
    * 생성되는 config 파일 while 문 이용하여 복사
      # while true ; do cp /tmp/cirt-builder* /root
    * 해당 파일로 curl 명령 수행
      # curl -q --config [file]
    * curl 명령 수행 시 문제 확인
      위 발생했던 내용은 proxy 서버 설정으로 인해 발생
    * proxy 서버 제거
    




  - https://www.cyberciti.biz/faq/how-to-install-kvm-on-centos-8-headless-server/







[자동화 스크립트 - 명령어로 사용]

[생성]

#!/bin/bash

if [ $1 ] && [ $2 ] && [ $3 ] && [ $4 ] && [ $5 ]
then
  virt-builder $1 -o /var/lib/libvirt/images/$2.qcow2 --root-password password:rplinux --uninstall cloud-init --size $3G --format qcow2

  virt-install --import --name $2 --vcpus $4 --memory $5 --os-variant $1 --network network=$6,model=virtio --disk /var/lib/libvirt/images/$2.qcow2,format=qcow2,bus=virtio &

else
  echo -e "\e[1;31mcommand\e[m : ex) # create_vm [os_name] [qcow_image_name/.qcow2] [size/G] [vcpu] [memory] [network/ex)default]"
  echo -e "\n\e[1;32m[Network_list]\e[m"
  NET_LIST=$(virsh net-list | egrep -v 'Autostart|--------' | awk '{print $1}' | sed ':a;N;$!ba;s/\n/ /g')
  NET_INFO=""
  for i in $NET_LIST
  do
    echo "$i"
    ip -4 addr show $(virsh net-info $i | grep Bridge | awk '{print $2}')
  done

fi





[삭제]

#!/bin/bash

if [ $1 ]
then
  virsh shutdown $1
  sleep 3
  SNAP=$(virsh snapshot-list $1 | egrep -v 'Creation|-------' | awk '{print $1}' | sed ':a;N;$!ba;s/\n/ /g')
    for i in $SNAP
    do
      virsh snapshot-delete $1 $i
    done

  VOL_LIST=$(virsh domblklist --domain $1 | egrep -v 'Target|-------' | awk '{print $2}' | sed ':a;N;$!ba;s/\n/ /g')
  virsh undefine --domain $1
  rm -rf $(echo $VOL_LIST)


else
  echo -e "\e[1;31mcommand\e[m : ex) # delete_vm [vm_name]"
  echo -e "\n\e[1;32m[vm_list]\e[m"
  virsh list --all

fi

